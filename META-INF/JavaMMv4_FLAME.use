------------------------- CUSTOM METRICS ---------------------------

-- TC (Total Classes) = Number of Classes in the PackageFragment.
TC() : Integer =
	allClasses()->size()

-- Classes Number (replaced TC that was defined in the MOODLib)
CN() : Integer = TC()

TON () : Integer = allClasses().NON()->sum

TOO () : Integer = allClasses().OON()->sum

TOD () : Integer = allClasses().DON()->sum

TOI () : Integer = allClasses().ION()->sum

TOA () : Integer = allClasses().AON()->sum	

TAN () : Integer = allClasses().NAN()->sum

TAO () : Integer = allClasses().OAN()->sum

TAD () : Integer = allClasses().DAN()->sum

TAI () : Integer = allClasses().IAN()->sum		

TAA () : Integer = allClasses().AAN()->sum	
	
-- Inheritance Links (from the MOODLIB)
IL (p : PackageFragment): Integer =
	allClasses().parents()->select(t: Type | p.isInternal(t))->size

-- Total Inheritance Links (from the MOODLIB)
TIL () : Integer = allClasses().PARN()->sum

CL (p : PackageFragment) : Integer = self.supplierClasses(p)->size()

-- CL n�o deveria ser = (intersec��o de self.supplierClasses(p) com TCL) ->size?

-- Total Coupling Links (from the MOODLIB)
TCL () : Integer =
	allClasses()->collect(coupledClasses()-> select(c: Type | self.isInternal(c))->size())->sum

AVN (a : Field) : Integer =	FVN(a)

-- Attribute to PackageFragment Visibility
-- Percentage of Classes in the considered PackageFragment where the Attribute can be accessed
-- (excludes the Classifier where the Attribute is declared).
APV (a : Field) : Real =
	(self.AVN(a) -1) / (self.TC() -1)

OVN (o : Method) : Integer =	FVN(o)	

-- Operation to PackageFragment Visibility
-- Percentage of Classes in the considered PackageFragment where the Operation can be accessed
-- (excludes the class where the Operation is declared).
OPV (o : Method) : Real =
	(self.OVN(o) -1) / (self.TC() -1)

FVN (f : Member) : Integer =
	self.allClasses()->select(FCV(f))->size

FPV (f : Member) : Real =	
	(self.FVN(f) -1) / (self.TC() -1)

FUN (f : Member) : Integer =
	self.allClasses()->select(allFeatures()->includes(f))->size() - 1

@metricsPackage(active = "true")
PNAN () : Integer = TAN()

@metricsPackage(active = "true")
PDAN () : Integer = TAD()

@metricsPackage(active = "true")
PIAN () : Integer = TAI()

@metricsPackage(active = "true")
POAN () : Integer = TAO()

@metricsPackage(active = "true")
PAAN () : Integer = TAA()

@metricsPackage(active = "true")
PNON () : Integer = TON()

@metricsPackage(active = "true")
PDON () : Integer = TOD()

@metricsPackage(active = "true")
PION () : Integer = TOI()

@metricsPackage(active = "true")
POON () : Integer = TOO()

EILN (p: PackageFragment) : Integer = IL(p)

IILN () : Integer = TIL()

ECLN (p: PackageFragment) : Integer = CL(p)

ICLN () : Integer = TCL()
															
CHIN(): Integer = 
	children()->size
			
DESN () : Integer =
	descendants()->size()
  
PARN () : Integer =
	parents()->size()
  
ASCN () : Integer =
	ascendants()->size()
		
-- Feature to Classifier Visibility
FCV (m : Member) : Boolean =
	if (m.oclIsTypeOf(Method)) then
		self.methods->includes(m) or
		self.getAllNestedTypes().methods->includes(m) or
		self.getAllEnclosingTypes().methods->includes(m) or
		self.nestedIn.nests.methods->includes(m) or
		m.oclAsType(Method).visibility = #Public or 
		m.oclAsType(Method).visibility = #Protected and
			self.parents().methods->includes(m) or 
		m.oclAsType(Method).visibility = #Default and 
			m.oclAsType(Method).type.typeRoot.packageFragment = self.typeRoot.packageFragment
	else
		if (m.oclIsTypeOf(Field)) then
			self.fields->includes(m) or
			self.getAllNestedTypes().fields->includes(m) or
			self.getAllEnclosingTypes().fields->includes(m) or
			self.nestedIn.nests.fields->includes(m) or
			m.oclAsType(Field).visibility = #Public or 
			m.oclAsType(Field).visibility = #Protected and
				self.parents().methods->includes(m) or 
			m.oclAsType(Field).visibility = #Default and 
				m.oclAsType(Field).type.typeRoot.packageFragment = self.typeRoot.packageFragment
		else
			if (m.oclIsTypeOf(Type)) then
				self.getAllNestedTypes()->includes(m) or
				self.getAllNestedTypes()->includes(m) or
				self.nestedIn.nests->includes(m) or
				m.oclAsType(Type).visibility = #Public or 
				m.oclAsType(Type).visibility = #Protected and
					self.parents().methods->includes(m) or 
				m.oclAsType(Type).visibility = #Default and 
					m.oclAsType(Type).typeRoot.packageFragment = self.typeRoot.packageFragment
			else
				false
			endif
		endif
	endif
				
ACV (a : Field) : Boolean = FCV(a)

OCV (o : Method) : Boolean = FCV(o)

@metricsClass(active = "true")	
NON () : Integer =
	newOperations()->size()
	
@metricsClass(active = "true")	
ION () : Integer =
	allInheritedOperations()->size()

@metricsClass(active = "true")	
OON () : Integer =
	overriddenOperations()->size()

@metricsClass(active = "true")	
DON () : Integer =
	definedOperations()->size()

@metricsClass(active = "true")
AON () : Integer =
	allOperations()->size()

@metricsClass(active = "true")	
NAN () : Integer =
	newAttributes()->size()

@metricsClass(active = "true")	
IAN () : Integer =
	allInheritedAttributes()->size()

@metricsClass(active = "true")	
OAN () : Integer =
	overriddenAttributes()->size()

@metricsClass(active = "true")	
DAN () : Integer =
	definedAttributes()->size()

@metricsClass(active = "true")	
AAN () : Integer =
	allAttributes()->size()
 
AUN() : Integer = self.FUN()
	
		
														
@metricsMethod(active = "true")
OUN () : Integer = self.FUN()

@metricsMethod(active = "true")
CYCLO () : Integer = 1 +
	self.getAllStatements()->select(s | not(s.oclIsKindOf(ReturnStatement))).conditionalOperatorCount->
	excluding(oclUndefined(Integer))->sum + self.getAllStatements()->
	select(s | s.oclIsKindOf(CatchClause) or s.oclIsKindOf(DoStatement) or s.oclIsKindOf(ForStatement) or 
	s.oclIsKindOf(IfStatement) or (s.oclIsKindOf(SwitchCase) and not(s.oclAsType(SwitchCase).isDefault)) or 
	s.oclIsKindOf(WhileStatement))->size
		
@metricsMethod(active = "false")
LOC () : Integer = self.getAllStatements()->size + self.getAllStatements()->select(oclIsTypeOf(Block))->size
		



