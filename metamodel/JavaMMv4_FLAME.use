@metricPackage(active = "true")
PNAN () : Integer = TAN()

@metricPackage(active = "true")
PDAN () : Integer = TAD()

@metricPackage(active = "true")
PIAN () : Integer = TAI()

@metricPackage(active = "true")
POAN () : Integer = TAO()

@metricPackage(active = "true")
PAAN () : Integer = TAA()

@metricPackage(active = "true")
PNON () : Integer = TON()

@metricPackage(active = "true")
PDON () : Integer = TOD()

@metricPackage(active = "true")
PION () : Integer = TOI()

@metricPackage(active = "true")
POON () : Integer = TOO()

@metricClass(active = "true")	
NON () : Integer =
	newOperations()->size()
	
@metricClass(active = "true")	
ION () : Integer =
	allInheritedOperations()->size()

@metricClass(active = "true")	
OON () : Integer =
	overriddenOperations()->size()

@metricClass(active = "true")	
DON () : Integer =
	definedOperations()->size()

@metricClass(active = "true")
AON () : Integer =
	allOperations()->size()

@metricClass(active = "true")	
NAN () : Integer =
	newAttributes()->size()

@metricClass(active = "true")	
IAN () : Integer =
	allInheritedAttributes()->size()

@metricClass(active = "true")	
OAN () : Integer =
	overriddenAttributes()->size()

@metricClass(active = "true")	
DAN () : Integer =
	definedAttributes()->size()

@metricClass(active = "true")	
AAN () : Integer =
	allAttributes()->size()

														
@metricMethod(active = "true")
OUN () : Integer = self.FUN()
					
@metricMethod(active = "true")
CYCLO () : Integer = 1 +
	self.getAllStatements()->select(s | not(s.oclIsKindOf(ReturnStatement))).conditionalOperatorCount->
	excluding(oclUndefined(Integer))->sum + self.getAllStatements()->
	select(s | s.oclIsKindOf(CatchClause) or s.oclIsKindOf(DoStatement) or s.oclIsKindOf(ForStatement) or 
	s.oclIsKindOf(IfStatement) or (s.oclIsKindOf(SwitchCase) and not(s.oclAsType(SwitchCase).isDefault)) or 
	s.oclIsKindOf(WhileStatement))->size
		
@metricMethod(active = "false")
LOC () : Integer = self.getAllStatements()->size + self.getAllStatements()->select(oclIsTypeOf(Block))->size
		
